import bodyParser from 'body-parser';
const validationRules = require('../middleware/rules.json');

export default function (app) {
  app.set('port', process.env.PORT || 3000);
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));
}

/**
 * TBD: middleware that checks the request body and querystring against the
 * existing json configuration in order to ensure that:
 * all required parameters are present
 * all parameters are of the correct type
 * non-existing parameters are blocked
 *
 * @throws throw a 400 code error with a relevant error message
 *
 * @param {object} req request object generated by express
 * @param {object} res response object generated by express
 * @param {function} next middleware function
 */


export const checkAgainstRules = (req, res, next) => {
  //if it's a correct route then API request will go through otherwise 404
  const path = validationRules.paths[req.baseUrl + req.path];
  const method = req.method.toLowerCase();

  

  //valid route and method?
  if (path && path[method]){
    //when it does go through - validate!
    // parameters 
    // does route accept parameters
      //no
    const bodyParamsUser = Object.keys(req.body);
    const queryParamsUser = Object.keys(req.query);

  
    if (!path[method].parameters){ 
      if (bodyParamsUser.length > 0 || queryParamsUser.length > 0) {
        res.status(404).send('HTTP status: 404 - extraneous parameter');
      }
    } else {

      let bodyParamsRules = [];
      let queryParamsRules = {};

      // gather the acceptable params in the required method and route
      path[method].parameters.forEach(elem => {
        if (elem['in'] == 'body') {
          bodyParamsRules.push(elem.schema.properties)
        } else if (elem['in'] == 'query') {
          queryParamsRules[elem.name] = elem.type;
        }
      })

      //parameters accepted
      //parameters required?
        //yes
            //check if all required parameters are given
      path[method].parameters.forEach(parameter => {
        if (parameter.schema && parameter.schema.required) {
          parameter.schema.required.forEach(requiredParam => {
            if(!req.body.hasOwnProperty(requiredParam)){
              res.status(404).send('HTTP status: 404 - missing parameter');
            }
          })
        }
      })

      //check query and body params
        //no unexpected parameters (extraneous)
        //check paramaters given(if any) pass the rules
      
      //body params
      bodyParamsRules = Object.assign({}, ...bodyParamsRules)
      

      if (bodyParamsUser.length > 0) {
        bodyParamsUser.forEach(param => {
          if (!Object.keys(bodyParamsRules).includes(param)) { //checks if the rules include the given parameter by user
            res.status(400).send('HTTP status: 400 - extraneous parameter'); //if not then send 400 
          } else {
            switch(bodyParamsRules[param].type) {
              case 'string':
                if (typeof req.body[param] !== 'string') res.status(400).send('HTTP status: 400 - invalid type');
                break;
              
              case 'integer':
                if (!Number.isInteger(req.body[param])) res.status(400).send('HTTP status: 400 - invalid type');
                break;
              
              case 'array':
                if(!Array.isArray(req.body[param])) {
                  res.status(400).send('HTTP status: 400 - invalid type')
                } else {
                  req.body[param].forEach(item => {
                    if (typeof item !== 'string') res.status(400).send('HTTP status: 400 - invalid type');
                  }) 
                };
                break;
            }
          }
        })
      } 

      if (queryParamsUser.length > 0) {
        queryParamsUser.forEach(param => {
          if (!Object.keys(queryParamsRules).includes(param)) {
            res.status(404).send('HTTP status: 404 - extraneous parameter') 
          } else {
            switch(queryParamsRules[param]) {
              case 'string':
                if (typeof req.query[param] !== 'string') res.status(400).send('HTTP status: 400 - invalid type');
                break;
              
              case 'integer':
                req.query[`${param}`] = parseInt(req.query[`${param}`]);
                if (!Number.isInteger(req.query[param])) res.status(400).send('HTTP status: 400 - invalid type');
                break;
              
              case 'array':
                if(!Array.isArray(req.query[param])) {
                  res.status(400).send('HTTP status: 400 - invalid type')
                } else {
                  req.query[param].forEach(item => {
                    if (typeof item !== 'string') res.status(400).send('HTTP status: 400 - invalid type');
                  }) 
                };
                break;
            }
          }
        })
      }  
    }      
  }
  return next();
};
